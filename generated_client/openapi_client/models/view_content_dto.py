# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist, constr, validator
from openapi_client.models.active_filter_abstract_type import ActiveFilterAbstractType
from openapi_client.models.default_selected_dto import DefaultSelectedDTO
from openapi_client.models.export_link_dto import ExportLinkDTO
from openapi_client.models.filter_abstract_type import FilterAbstractType
from openapi_client.models.isochrone_dto import IsochroneDTO
from openapi_client.models.map_context_menu_dto import MapContextMenuDTO
from openapi_client.models.map_options_dto import MapOptionsDTO
from openapi_client.models.measure_dto import MeasureDTO
from openapi_client.models.variables_dto import VariablesDTO

class ViewContentDTO(BaseModel):
    """
    ViewContentDTO
    """
    icon: Optional[constr(strict=True)] = None
    dashboard: constr(strict=True) = Field(...)
    map: Optional[constr(strict=True)] = None
    marker_selector: Optional[constr(strict=True)] = Field(default=None, alias="markerSelector")
    markers_only: Optional[StrictBool] = Field(default=None, alias="markersOnly")
    show_attributes_on_drill: Optional[StrictBool] = Field(default=None, alias="showAttributesOnDrill")
    default_granularity: Optional[constr(strict=True)] = Field(default=None, alias="defaultGranularity")
    default_visualized: Optional[constr(strict=True)] = Field(default=None, alias="defaultVisualized")
    default_visualization: Optional[StrictStr] = Field(default=None, alias="defaultVisualization")
    default_drilled: Optional[constr(strict=True)] = Field(default=None, alias="defaultDrilled")
    default_tool: Optional[StrictStr] = Field(default=None, alias="defaultTool")
    default_compare_type: Optional[StrictStr] = Field(default=None, alias="defaultCompareType")
    compare_collapsed: Optional[StrictBool] = Field(default=None, alias="compareCollapsed")
    filter_group: Optional[conlist(FilterAbstractType)] = Field(default=None, alias="filterGroup")
    default_active_filters: Optional[conlist(ActiveFilterAbstractType)] = Field(default=None, alias="defaultActiveFilters")
    variables: Optional[conlist(VariablesDTO)] = None
    spatial_query: Optional[IsochroneDTO] = Field(default=None, alias="spatialQuery")
    fitness_groups: Optional[conint(strict=True, le=5, ge=3)] = Field(default=None, alias="fitnessGroups")
    map_options: Optional[MapOptionsDTO] = Field(default=None, alias="mapOptions")
    map_context_menu: Optional[MapContextMenuDTO] = Field(default=None, alias="mapContextMenu")
    exports: Optional[conlist(ExportLinkDTO)] = None
    measure: Optional[MeasureDTO] = None
    default_selected: Optional[DefaultSelectedDTO] = Field(default=None, alias="defaultSelected")
    exclude_datasets: Optional[conlist(StrictStr)] = Field(default=None, alias="excludeDatasets")
    disable_fitness: Optional[StrictBool] = Field(default=None, alias="disableFitness")
    __properties = ["icon", "dashboard", "map", "markerSelector", "markersOnly", "showAttributesOnDrill", "defaultGranularity", "defaultVisualized", "defaultVisualization", "defaultDrilled", "defaultTool", "defaultCompareType", "compareCollapsed", "filterGroup", "defaultActiveFilters", "variables", "spatialQuery", "fitnessGroups", "mapOptions", "mapContextMenu", "exports", "measure", "defaultSelected", "excludeDatasets", "disableFitness"]

    @validator('icon')
    def icon_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z_]+$/")
        return value

    @validator('dashboard')
    def dashboard_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/dashboards(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/dashboards(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('map')
    def map_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/maps(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/maps(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('marker_selector')
    def marker_selector_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/markerSelectors(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/markerSelectors(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_granularity')
    def default_granularity_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_visualized')
    def default_visualized_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_visualization')
    def default_visualization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('areas', 'grid', 'zones', 'line', 'dotmap', 'heatmap'):
            raise ValueError("must be one of enum values ('areas', 'grid', 'zones', 'line', 'dotmap', 'heatmap')")
        return value

    @validator('default_drilled')
    def default_drilled_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_tool')
    def default_tool_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('search', 'measure', 'filter', 'compare'):
            raise ValueError("must be one of enum values ('search', 'measure', 'filter', 'compare')")
        return value

    @validator('default_compare_type')
    def default_compare_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('dominance'):
            raise ValueError("must be one of enum values ('dominance')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ViewContentDTO:
        """Create an instance of ViewContentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in filter_group (list)
        _items = []
        if self.filter_group:
            for _item in self.filter_group:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterGroup'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in default_active_filters (list)
        _items = []
        if self.default_active_filters:
            for _item in self.default_active_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['defaultActiveFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item in self.variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variables'] = _items
        # override the default output from pydantic by calling `to_dict()` of spatial_query
        if self.spatial_query:
            _dict['spatialQuery'] = self.spatial_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_options
        if self.map_options:
            _dict['mapOptions'] = self.map_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_context_menu
        if self.map_context_menu:
            _dict['mapContextMenu'] = self.map_context_menu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in exports (list)
        _items = []
        if self.exports:
            for _item in self.exports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exports'] = _items
        # override the default output from pydantic by calling `to_dict()` of measure
        if self.measure:
            _dict['measure'] = self.measure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_selected
        if self.default_selected:
            _dict['defaultSelected'] = self.default_selected.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ViewContentDTO:
        """Create an instance of ViewContentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ViewContentDTO.parse_obj(obj)

        _obj = ViewContentDTO.parse_obj({
            "icon": obj.get("icon"),
            "dashboard": obj.get("dashboard"),
            "map": obj.get("map"),
            "marker_selector": obj.get("markerSelector"),
            "markers_only": obj.get("markersOnly"),
            "show_attributes_on_drill": obj.get("showAttributesOnDrill"),
            "default_granularity": obj.get("defaultGranularity"),
            "default_visualized": obj.get("defaultVisualized"),
            "default_visualization": obj.get("defaultVisualization"),
            "default_drilled": obj.get("defaultDrilled"),
            "default_tool": obj.get("defaultTool"),
            "default_compare_type": obj.get("defaultCompareType"),
            "compare_collapsed": obj.get("compareCollapsed"),
            "filter_group": [FilterAbstractType.from_dict(_item) for _item in obj.get("filterGroup")] if obj.get("filterGroup") is not None else None,
            "default_active_filters": [ActiveFilterAbstractType.from_dict(_item) for _item in obj.get("defaultActiveFilters")] if obj.get("defaultActiveFilters") is not None else None,
            "variables": [VariablesDTO.from_dict(_item) for _item in obj.get("variables")] if obj.get("variables") is not None else None,
            "spatial_query": IsochroneDTO.from_dict(obj.get("spatialQuery")) if obj.get("spatialQuery") is not None else None,
            "fitness_groups": obj.get("fitnessGroups"),
            "map_options": MapOptionsDTO.from_dict(obj.get("mapOptions")) if obj.get("mapOptions") is not None else None,
            "map_context_menu": MapContextMenuDTO.from_dict(obj.get("mapContextMenu")) if obj.get("mapContextMenu") is not None else None,
            "exports": [ExportLinkDTO.from_dict(_item) for _item in obj.get("exports")] if obj.get("exports") is not None else None,
            "measure": MeasureDTO.from_dict(obj.get("measure")) if obj.get("measure") is not None else None,
            "default_selected": DefaultSelectedDTO.from_dict(obj.get("defaultSelected")) if obj.get("defaultSelected") is not None else None,
            "exclude_datasets": obj.get("excludeDatasets"),
            "disable_fitness": obj.get("disableFitness")
        })
        return _obj


