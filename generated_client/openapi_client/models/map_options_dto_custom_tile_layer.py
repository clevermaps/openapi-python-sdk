# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator

class MapOptionsDTOCustomTileLayer(BaseModel):
    """
    MapOptionsDTOCustomTileLayer
    """
    url: constr(strict=True) = Field(...)
    access_token: constr(strict=True, min_length=1) = Field(default=..., alias="accessToken")
    __properties = ["url", "accessToken"]

    @validator('url')
    def url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^mapbox:\/\/styles\/.*$", value):
            raise ValueError(r"must validate the regular expression /^mapbox:\/\/styles\/.*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MapOptionsDTOCustomTileLayer:
        """Create an instance of MapOptionsDTOCustomTileLayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MapOptionsDTOCustomTileLayer:
        """Create an instance of MapOptionsDTOCustomTileLayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MapOptionsDTOCustomTileLayer.parse_obj(obj)

        _obj = MapOptionsDTOCustomTileLayer.parse_obj({
            "url": obj.get("url"),
            "access_token": obj.get("accessToken")
        })
        return _obj


