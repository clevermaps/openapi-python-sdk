# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.feature_attribute_dto import FeatureAttributeDTO

class DashboardDatasetPropertiesDTO(BaseModel):
    """
    DashboardDatasetPropertiesDTO
    """
    dataset: constr(strict=True) = Field(...)
    default_search: Optional[StrictStr] = Field(default=None, alias="defaultSearch")
    feature_attributes: conlist(FeatureAttributeDTO, min_items=1) = Field(default=..., alias="featureAttributes")
    __properties = ["dataset", "defaultSearch", "featureAttributes"]

    @validator('dataset')
    def dataset_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_search')
    def default_search_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('enable', 'disable', 'auto'):
            raise ValueError("must be one of enum values ('enable', 'disable', 'auto')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DashboardDatasetPropertiesDTO:
        """Create an instance of DashboardDatasetPropertiesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in feature_attributes (list)
        _items = []
        if self.feature_attributes:
            for _item in self.feature_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['featureAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DashboardDatasetPropertiesDTO:
        """Create an instance of DashboardDatasetPropertiesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DashboardDatasetPropertiesDTO.parse_obj(obj)

        _obj = DashboardDatasetPropertiesDTO.parse_obj({
            "dataset": obj.get("dataset"),
            "default_search": obj.get("defaultSearch"),
            "feature_attributes": [FeatureAttributeDTO.from_dict(_item) for _item in obj.get("featureAttributes")] if obj.get("featureAttributes") is not None else None
        })
        return _obj


