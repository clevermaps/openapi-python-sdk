# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class RankingDTO(BaseModel):
    """
    RankingDTO
    """
    type: constr(strict=True) = Field(...)
    title: Optional[constr(strict=True, max_length=255)] = None
    indicator: Optional[constr(strict=True)] = None
    default_layer: Optional[constr(strict=True)] = Field(default=None, alias="defaultLayer")
    feature_type: Optional[StrictStr] = Field(default=None, alias="featureType")
    direction: Optional[StrictStr] = None
    collapsed: Optional[StrictBool] = None
    visualized: Optional[StrictBool] = None
    __properties = ["type", "title", "indicator", "defaultLayer", "featureType", "direction", "collapsed", "visualized"]

    @validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^ranking$", value):
            raise ValueError(r"must validate the regular expression /^ranking$/")
        return value

    @validator('indicator')
    def indicator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('default_layer')
    def default_layer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*$/")
        return value

    @validator('feature_type')
    def feature_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('granularity', 'markers'):
            raise ValueError("must be one of enum values ('granularity', 'markers')")
        return value

    @validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('asc', 'desc'):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RankingDTO:
        """Create an instance of RankingDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RankingDTO:
        """Create an instance of RankingDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RankingDTO.parse_obj(obj)

        _obj = RankingDTO.parse_obj({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "indicator": obj.get("indicator"),
            "default_layer": obj.get("defaultLayer"),
            "feature_type": obj.get("featureType"),
            "direction": obj.get("direction"),
            "collapsed": obj.get("collapsed"),
            "visualized": obj.get("visualized")
        })
        return _obj


