# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from openapi_client.models.view_content_dto import ViewContentDTO

class ViewDTO(BaseModel):
    """
    ViewDTO
    """
    id: Optional[StrictStr] = None
    name: constr(strict=True) = Field(...)
    type: Optional[StrictStr] = None
    title: constr(strict=True, max_length=255, min_length=1) = Field(...)
    description: constr(strict=True, max_length=2000) = Field(...)
    content: ViewContentDTO = Field(...)
    __properties = ["id", "name", "type", "title", "description", "content"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*$/")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('dataset', 'view', 'dashboard', 'indicatorDrill', 'indicator', 'metric', 'marker', 'markerSelector', 'export', 'dataPermission', 'projectSettings', 'share', 'map', 'attributeStyle'):
            raise ValueError("must be one of enum values ('dataset', 'view', 'dashboard', 'indicatorDrill', 'indicator', 'metric', 'marker', 'markerSelector', 'export', 'dataPermission', 'projectSettings', 'share', 'map', 'attributeStyle')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ViewDTO:
        """Create an instance of ViewDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ViewDTO:
        """Create an instance of ViewDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ViewDTO.parse_obj(obj)

        _obj = ViewDTO.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "content": ViewContentDTO.from_dict(obj.get("content")) if obj.get("content") is not None else None
        })
        return _obj


