# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, StrictStr, confloat, conint, validator

class IsochroneDTO(BaseModel):
    """
    IsochroneDTO
    """
    lat: Optional[Union[confloat(le=180.0, ge=-180.0, strict=True), conint(le=180, ge=-180, strict=True)]] = None
    lng: Optional[Union[confloat(le=180.0, ge=-180.0, strict=True), conint(le=180, ge=-180, strict=True)]] = None
    profile: Optional[StrictStr] = None
    unit: Optional[StrictStr] = None
    amount: Optional[conint(strict=True, ge=1)] = None
    geometry: Optional[Any] = None
    __properties = ["lat", "lng", "profile", "unit", "amount", "geometry"]

    @validator('profile')
    def profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('car', 'bike', 'foot', 'air'):
            raise ValueError("must be one of enum values ('car', 'bike', 'foot', 'air')")
        return value

    @validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('time', 'distance'):
            raise ValueError("must be one of enum values ('time', 'distance')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IsochroneDTO:
        """Create an instance of IsochroneDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if geometry (nullable) is None
        # and __fields_set__ contains the field
        if self.geometry is None and "geometry" in self.__fields_set__:
            _dict['geometry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IsochroneDTO:
        """Create an instance of IsochroneDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IsochroneDTO.parse_obj(obj)

        _obj = IsochroneDTO.parse_obj({
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "profile": obj.get("profile"),
            "unit": obj.get("unit"),
            "amount": obj.get("amount"),
            "geometry": obj.get("geometry")
        })
        return _obj


