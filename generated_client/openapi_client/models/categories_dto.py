# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from openapi_client.models.order_by_dto import OrderByDTO

class CategoriesDTO(BaseModel):
    """
    CategoriesDTO
    """
    type: constr(strict=True) = Field(...)
    title: Optional[constr(strict=True, max_length=255)] = None
    description: Optional[constr(strict=True, max_length=2000)] = None
    split_property: Optional[StrictStr] = Field(default=None, alias="splitProperty")
    attribute_style: Optional[constr(strict=True)] = Field(default=None, alias="attributeStyle")
    indicator: Optional[constr(strict=True)] = None
    collapsed: Optional[StrictBool] = None
    visualized: Optional[StrictBool] = None
    filterable: Optional[StrictBool] = None
    hide_null_items: Optional[StrictBool] = Field(default=None, alias="hideNullItems")
    size_limit: Optional[StrictInt] = Field(default=None, alias="sizeLimit")
    order_by: Optional[OrderByDTO] = Field(default=None, alias="orderBy")
    vertical: Optional[StrictBool] = None
    condensed: Optional[StrictBool] = None
    dual_property: Optional[StrictStr] = Field(default=None, alias="dualProperty")
    dual_attribute_style: Optional[constr(strict=True)] = Field(default=None, alias="dualAttributeStyle")
    label: Optional[constr(strict=True, max_length=255)] = None
    __properties = ["type", "title", "description", "splitProperty", "attributeStyle", "indicator", "collapsed", "visualized", "filterable", "hideNullItems", "sizeLimit", "orderBy", "vertical", "condensed", "dualProperty", "dualAttributeStyle", "label"]

    @validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^categories$", value):
            raise ValueError(r"must validate the regular expression /^categories$/")
        return value

    @validator('attribute_style')
    def attribute_style_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('indicator')
    def indicator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @validator('dual_attribute_style')
    def dual_attribute_style_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CategoriesDTO:
        """Create an instance of CategoriesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['orderBy'] = self.order_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CategoriesDTO:
        """Create an instance of CategoriesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CategoriesDTO.parse_obj(obj)

        _obj = CategoriesDTO.parse_obj({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "split_property": obj.get("splitProperty"),
            "attribute_style": obj.get("attributeStyle"),
            "indicator": obj.get("indicator"),
            "collapsed": obj.get("collapsed"),
            "visualized": obj.get("visualized"),
            "filterable": obj.get("filterable"),
            "hide_null_items": obj.get("hideNullItems"),
            "size_limit": obj.get("sizeLimit"),
            "order_by": OrderByDTO.from_dict(obj.get("orderBy")) if obj.get("orderBy") is not None else None,
            "vertical": obj.get("vertical"),
            "condensed": obj.get("condensed"),
            "dual_property": obj.get("dualProperty"),
            "dual_attribute_style": obj.get("dualAttributeStyle"),
            "label": obj.get("label")
        })
        return _obj


