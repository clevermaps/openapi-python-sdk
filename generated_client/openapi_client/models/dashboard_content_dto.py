# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.block_row_abstract_type import BlockRowAbstractType
from openapi_client.models.dashboard_dataset_properties_dto import DashboardDatasetPropertiesDTO

class DashboardContentDTO(BaseModel):
    """
    DashboardContentDTO
    """
    block_rows: Optional[conlist(BlockRowAbstractType)] = Field(default=None, alias="blockRows")
    dataset_properties: Optional[conlist(DashboardDatasetPropertiesDTO)] = Field(default=None, alias="datasetProperties")
    __properties = ["blockRows", "datasetProperties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DashboardContentDTO:
        """Create an instance of DashboardContentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in block_rows (list)
        _items = []
        if self.block_rows:
            for _item in self.block_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['blockRows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_properties (list)
        _items = []
        if self.dataset_properties:
            for _item in self.dataset_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasetProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DashboardContentDTO:
        """Create an instance of DashboardContentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DashboardContentDTO.parse_obj(obj)

        _obj = DashboardContentDTO.parse_obj({
            "block_rows": [BlockRowAbstractType.from_dict(_item) for _item in obj.get("blockRows")] if obj.get("blockRows") is not None else None,
            "dataset_properties": [DashboardDatasetPropertiesDTO.from_dict(_item) for _item in obj.get("datasetProperties")] if obj.get("datasetProperties") is not None else None
        })
        return _obj


