# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist, constr, validator

class IndicatorGroupDTO(BaseModel):
    """
    IndicatorGroupDTO
    """
    type: constr(strict=True) = Field(...)
    title: constr(strict=True, min_length=1) = Field(...)
    description: Optional[constr(strict=True, max_length=2000)] = None
    collapsed: Optional[StrictBool] = None
    block_rows: conlist(BlockRowAbstractType) = Field(default=..., alias="blockRows")
    __properties = ["type", "title", "description", "collapsed", "blockRows"]

    @validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^indicatorGroup$", value):
            raise ValueError(r"must validate the regular expression /^indicatorGroup$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndicatorGroupDTO:
        """Create an instance of IndicatorGroupDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in block_rows (list)
        _items = []
        if self.block_rows:
            for _item in self.block_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['blockRows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndicatorGroupDTO:
        """Create an instance of IndicatorGroupDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IndicatorGroupDTO.parse_obj(obj)

        _obj = IndicatorGroupDTO.parse_obj({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "collapsed": obj.get("collapsed"),
            "block_rows": [BlockRowAbstractType.from_dict(_item) for _item in obj.get("blockRows")] if obj.get("blockRows") is not None else None
        })
        return _obj

from openapi_client.models.block_row_abstract_type import BlockRowAbstractType
IndicatorGroupDTO.update_forward_refs()

