# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.mandatory_keys_for_pagable_response import MandatoryKeysForPagableResponse
from openapi_client.models.view_dto import ViewDTO

class ViewPagedModelDTO(BaseModel):
    """
    ViewPagedModelDTO
    """
    content: Optional[conlist(ViewDTO)] = None
    links: Optional[conlist(Dict[str, Any], unique_items=True)] = Field(default=None, description="define keys links and page that are mandatory for all pageble responses")
    page: Optional[MandatoryKeysForPagableResponse] = None
    __properties = ["content", "links", "page"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ViewPagedModelDTO:
        """Create an instance of ViewPagedModelDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item in self.content:
                if _item:
                    _items.append(_item.to_dict())
            _dict['content'] = _items
        # override the default output from pydantic by calling `to_dict()` of page
        if self.page:
            _dict['page'] = self.page.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ViewPagedModelDTO:
        """Create an instance of ViewPagedModelDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ViewPagedModelDTO.parse_obj(obj)

        _obj = ViewPagedModelDTO.parse_obj({
            "content": [ViewDTO.from_dict(_item) for _item in obj.get("content")] if obj.get("content") is not None else None,
            "links": obj.get("links"),
            "page": MandatoryKeysForPagableResponse.from_dict(obj.get("page")) if obj.get("page") is not None else None
        })
        return _obj


